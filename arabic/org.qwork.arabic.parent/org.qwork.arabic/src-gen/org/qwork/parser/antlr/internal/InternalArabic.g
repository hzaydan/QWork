/*
 * generated by Xtext 2.25.0
 */
grammar InternalArabic;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.qwork.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.qwork.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.qwork.services.ArabicGrammarAccess;

}

@parser::members {

 	private ArabicGrammarAccess grammarAccess;

    public InternalArabicParser(TokenStream input, ArabicGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ArabicGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getPhrasesPhraseParserRuleCall_0());
			}
			lv_phrases_0_0=rulePhrase
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"phrases",
					lv_phrases_0_0,
					"org.qwork.Arabic.Phrase");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRulePhrase
entryRulePhrase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPhraseRule()); }
	iv_rulePhrase=rulePhrase
	{ $current=$iv_rulePhrase.current; }
	EOF;

// Rule Phrase
rulePhrase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_words_0_0=RULE_AWORD
				{
					newLeafNode(lv_words_0_0, grammarAccess.getPhraseAccess().getWordsAWORDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPhraseRule());
					}
					addWithLastConsumed(
						$current,
						"words",
						lv_words_0_0,
						"org.qwork.Arabic.AWORD");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getPhraseAccess().getWSTerminalRuleCall_1_0());
			}
			(
				(
					lv_words_2_0=RULE_AWORD
					{
						newLeafNode(lv_words_2_0, grammarAccess.getPhraseAccess().getWordsAWORDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPhraseRule());
						}
						addWithLastConsumed(
							$current,
							"words",
							lv_words_2_0,
							"org.qwork.Arabic.AWORD");
					}
				)
			)
		)*
	)
;

fragment RULE_ALETTER : '\u0621'..'\u064A';

RULE_ADIGIT : '\u0660'..'\u0669';

fragment RULE_AHARAKAH : ('\u064E'..'\u0650'|'\u0652');

fragment RULE_ASHADDAH : '\u0651';

RULE_ANONLETTER : ('\u0600'..'\u0620'|'\u064B'..'\u06FF');

RULE_AWORD : (RULE_ALETTER|RULE_AHARAKAH|RULE_ASHADDAH)+;

RULE_KALEMAH : '"' ( options {greedy=false;} : . )*'"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
