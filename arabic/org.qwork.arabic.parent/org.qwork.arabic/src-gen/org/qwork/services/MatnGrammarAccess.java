/*
 * generated by Xtext 2.25.0
 */
package org.qwork.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MatnGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MatnModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Matn.MatnModel");
		private final Assignment cMatnAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMatnMatnParserRuleCall_0 = (RuleCall)cMatnAssignment.eContents().get(0);
		
		//MatnModel:
		//    matn=Matn
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//matn=Matn
		public Assignment getMatnAssignment() { return cMatnAssignment; }
		
		//Matn
		public RuleCall getMatnMatnParserRuleCall_0() { return cMatnMatnParserRuleCall_0; }
	}
	public class MatnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Matn.Matn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBASMALAHTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAWORDSParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMakatehAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMakatehMaktahParserRuleCall_2_0 = (RuleCall)cMakatehAssignment_2.eContents().get(0);
		
		//Matn:
		//    BASMALAH
		//    name=AWORDS
		//    makateh+=Maktah+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BASMALAH
		//name=AWORDS
		//makateh+=Maktah+
		public Group getGroup() { return cGroup; }
		
		//BASMALAH
		public RuleCall getBASMALAHTerminalRuleCall_0() { return cBASMALAHTerminalRuleCall_0; }
		
		//name=AWORDS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//AWORDS
		public RuleCall getNameAWORDSParserRuleCall_1_0() { return cNameAWORDSParserRuleCall_1_0; }
		
		//makateh+=Maktah+
		public Assignment getMakatehAssignment_2() { return cMakatehAssignment_2; }
		
		//Maktah
		public RuleCall getMakatehMaktahParserRuleCall_2_0() { return cMakatehMaktahParserRuleCall_2_0; }
	}
	public class MaktahElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Matn.Maktah");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameAWORDSParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAbyatCountAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbyatCountINTTerminalRuleCall_5_0 = (RuleCall)cAbyatCountAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAbyatAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAbyatBaytParserRuleCall_7_0 = (RuleCall)cAbyatAssignment_7.eContents().get(0);
		
		//Maktah:
		//    '*' '*' '*'
		//    name = AWORDS
		//    '(' abyatCount=INT ')'
		//    abyat+=Bayt+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' '*' '*'
		//name = AWORDS
		//'(' abyatCount=INT ')'
		//abyat+=Bayt+
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//name = AWORDS
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//AWORDS
		public RuleCall getNameAWORDSParserRuleCall_3_0() { return cNameAWORDSParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//abyatCount=INT
		public Assignment getAbyatCountAssignment_5() { return cAbyatCountAssignment_5; }
		
		//INT
		public RuleCall getAbyatCountINTTerminalRuleCall_5_0() { return cAbyatCountINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//abyat+=Bayt+
		public Assignment getAbyatAssignment_7() { return cAbyatAssignment_7; }
		
		//Bayt
		public RuleCall getAbyatBaytParserRuleCall_7_0() { return cAbyatBaytParserRuleCall_7_0; }
	}
	public class BaytElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Matn.Bayt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRakmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRakmINTTerminalRuleCall_0_0 = (RuleCall)cRakmAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSadrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSadrAWORDTerminalRuleCall_2_0 = (RuleCall)cSadrAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAjozAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAjozAWORDTerminalRuleCall_4_0 = (RuleCall)cAjozAssignment_4.eContents().get(0);
		
		//Bayt:
		//    rakm=INT '-'
		//    sadr+=AWORD+
		//    '...'
		//    ajoz+=AWORD+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rakm=INT '-'
		//sadr+=AWORD+
		//'...'
		//ajoz+=AWORD+
		public Group getGroup() { return cGroup; }
		
		//rakm=INT
		public Assignment getRakmAssignment_0() { return cRakmAssignment_0; }
		
		//INT
		public RuleCall getRakmINTTerminalRuleCall_0_0() { return cRakmINTTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//sadr+=AWORD+
		public Assignment getSadrAssignment_2() { return cSadrAssignment_2; }
		
		//AWORD
		public RuleCall getSadrAWORDTerminalRuleCall_2_0() { return cSadrAWORDTerminalRuleCall_2_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_3() { return cFullStopFullStopFullStopKeyword_3; }
		
		//ajoz+=AWORD+
		public Assignment getAjozAssignment_4() { return cAjozAssignment_4; }
		
		//AWORD
		public RuleCall getAjozAWORDTerminalRuleCall_4_0() { return cAjozAWORDTerminalRuleCall_4_0; }
	}
	public class AWORDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Matn.AWORDS");
		private final RuleCall cAWORDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AWORDS:
		//    AWORD+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AWORD+
		public RuleCall getAWORDTerminalRuleCall() { return cAWORDTerminalRuleCall; }
	}
	
	
	private final MatnModelElements pMatnModel;
	private final MatnElements pMatn;
	private final MaktahElements pMaktah;
	private final BaytElements pBayt;
	private final AWORDSElements pAWORDS;
	
	private final Grammar grammar;
	
	private final OsolQiraaGrammarAccess gaOsolQiraa;
	
	private final AbjadGrammarAccess gaAbjad;
	
	private final QAyahStartGrammarAccess gaQAyahStart;
	
	private final ArabicGrammarAccess gaArabic;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MatnGrammarAccess(GrammarProvider grammarProvider,
			OsolQiraaGrammarAccess gaOsolQiraa,
			AbjadGrammarAccess gaAbjad,
			QAyahStartGrammarAccess gaQAyahStart,
			ArabicGrammarAccess gaArabic,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaOsolQiraa = gaOsolQiraa;
		this.gaAbjad = gaAbjad;
		this.gaQAyahStart = gaQAyahStart;
		this.gaArabic = gaArabic;
		this.gaTerminals = gaTerminals;
		this.pMatnModel = new MatnModelElements();
		this.pMatn = new MatnElements();
		this.pMaktah = new MaktahElements();
		this.pBayt = new BaytElements();
		this.pAWORDS = new AWORDSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.qwork.Matn".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public OsolQiraaGrammarAccess getOsolQiraaGrammarAccess() {
		return gaOsolQiraa;
	}
	
	public AbjadGrammarAccess getAbjadGrammarAccess() {
		return gaAbjad;
	}
	
	public QAyahStartGrammarAccess getQAyahStartGrammarAccess() {
		return gaQAyahStart;
	}
	
	public ArabicGrammarAccess getArabicGrammarAccess() {
		return gaArabic;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MatnModel:
	//    matn=Matn
	//;
	public MatnModelElements getMatnModelAccess() {
		return pMatnModel;
	}
	
	public ParserRule getMatnModelRule() {
		return getMatnModelAccess().getRule();
	}
	
	//Matn:
	//    BASMALAH
	//    name=AWORDS
	//    makateh+=Maktah+
	//;
	public MatnElements getMatnAccess() {
		return pMatn;
	}
	
	public ParserRule getMatnRule() {
		return getMatnAccess().getRule();
	}
	
	//Maktah:
	//    '*' '*' '*'
	//    name = AWORDS
	//    '(' abyatCount=INT ')'
	//    abyat+=Bayt+
	//;
	public MaktahElements getMaktahAccess() {
		return pMaktah;
	}
	
	public ParserRule getMaktahRule() {
		return getMaktahAccess().getRule();
	}
	
	//Bayt:
	//    rakm=INT '-'
	//    sadr+=AWORD+
	//    '...'
	//    ajoz+=AWORD+
	//;
	public BaytElements getBaytAccess() {
		return pBayt;
	}
	
	public ParserRule getBaytRule() {
		return getBaytAccess().getRule();
	}
	
	//AWORDS:
	//    AWORD+
	//;
	public AWORDSElements getAWORDSAccess() {
		return pAWORDS;
	}
	
	public ParserRule getAWORDSRule() {
		return getAWORDSAccess().getRule();
	}
	
	//OsolQiraaModel:
	//    (
	//        qoraa+=Qaree | torok+=Tareek | rowat+=Rawee |
	//        imams+=IMAM | istelahat+=Istelah | koyod+=Kayd
	//    )*
	//;
	public OsolQiraaGrammarAccess.OsolQiraaModelElements getOsolQiraaModelAccess() {
		return gaOsolQiraa.getOsolQiraaModelAccess();
	}
	
	public ParserRule getOsolQiraaModelRule() {
		return getOsolQiraaModelAccess().getRule();
	}
	
	//fragment Person:
	//    name=KALEMAH
	//    ('اسمه' esm=KALEMAH)?
	//    ('لقبه' lakab=KALEMAH)?
	//    ('توفي' towofia=INT)?
	//;
	public OsolQiraaGrammarAccess.PersonElements getPersonAccess() {
		return gaOsolQiraa.getPersonAccess();
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//fragment Douaa:
	//    d=('رحمه' | 'أكرمه') 'الله'
	//;
	public OsolQiraaGrammarAccess.DouaaElements getDouaaAccess() {
		return gaOsolQiraa.getDouaaAccess();
	}
	
	public ParserRule getDouaaRule() {
		return getDouaaAccess().getRule();
	}
	
	//IMAM:
	//    'الإمام' Person Douaa
	//;
	public OsolQiraaGrammarAccess.IMAMElements getIMAMAccess() {
		return gaOsolQiraa.getIMAMAccess();
	}
	
	public ParserRule getIMAMRule() {
		return getIMAMAccess().getRule();
	}
	
	//Qaree:
	//    'قارئ'
	//    Person
	//;
	public OsolQiraaGrammarAccess.QareeElements getQareeAccess() {
		return gaOsolQiraa.getQareeAccess();
	}
	
	public ParserRule getQareeRule() {
		return getQareeAccess().getRule();
	}
	
	//Rawee:
	//    'راو'
	//    Person
	//    'عن' qaree=[Qaree|KALEMAH]
	//;
	public OsolQiraaGrammarAccess.RaweeElements getRaweeAccess() {
		return gaOsolQiraa.getRaweeAccess();
	}
	
	public ParserRule getRaweeRule() {
		return getRaweeAccess().getRule();
	}
	
	//YokraaLah:
	//    Qaree | Rawee | Istelah
	//;
	public OsolQiraaGrammarAccess.YokraaLahElements getYokraaLahAccess() {
		return gaOsolQiraa.getYokraaLahAccess();
	}
	
	public ParserRule getYokraaLahRule() {
		return getYokraaLahAccess().getRule();
	}
	
	//Tareek:
	//    'طريق' 'تلاوة' name=KALEMAH
	//    (
	//        (simple?='خالص' 'ل' ref=[YokraaLah|KALEMAH]) |
	//        ((complex?='مركب' 'من')
	//            (refs+=[Tareek|KALEMAH])+
	//        )
	//    )
	//;
	public OsolQiraaGrammarAccess.TareekElements getTareekAccess() {
		return gaOsolQiraa.getTareekAccess();
	}
	
	public ParserRule getTareekRule() {
		return getTareekAccess().getRule();
	}
	
	//Kayd:
	//    'قيد' name=KALEMAH
	//;
	public OsolQiraaGrammarAccess.KaydElements getKaydAccess() {
		return gaOsolQiraa.getKaydAccess();
	}
	
	public ParserRule getKaydRule() {
		return getKaydAccess().getRule();
	}
	
	//Istelah:
	//    'اصطلاح' name=KALEMAH 'يعني' refs+=[YokraaLah|KALEMAH] ('و' refs+=[YokraaLah|KALEMAH])*
	//;
	public OsolQiraaGrammarAccess.IstelahElements getIstelahAccess() {
		return gaOsolQiraa.getIstelahAccess();
	}
	
	public ParserRule getIstelahRule() {
		return getIstelahAccess().getRule();
	}
	
	//Ramz:
	//    'رمز' name=KALEMAH 'يعني' refs+=[YokraaLah|KALEMAH] ('و' refs+=[YokraaLah|KALEMAH])*
	//;
	public OsolQiraaGrammarAccess.RamzElements getRamzAccess() {
		return gaOsolQiraa.getRamzAccess();
	}
	
	public ParserRule getRamzRule() {
		return getRamzAccess().getRule();
	}
	
	//YokraaLahWaRamz:
	//    YokraaLah | Ramz
	//;
	public OsolQiraaGrammarAccess.YokraaLahWaRamzElements getYokraaLahWaRamzAccess() {
		return gaOsolQiraa.getYokraaLahWaRamzAccess();
	}
	
	public ParserRule getYokraaLahWaRamzRule() {
		return getYokraaLahWaRamzAccess().getRule();
	}
	
	//HarfQuran:
	//    word=AWORD 'من' 'قوله' 'تعالى' ayah=[AyahStart|KALEMAH] ('الموضع' mawdee=Mawdee)?
	//;
	public OsolQiraaGrammarAccess.HarfQuranElements getHarfQuranAccess() {
		return gaOsolQiraa.getHarfQuranAccess();
	}
	
	public ParserRule getHarfQuranRule() {
		return getHarfQuranAccess().getRule();
	}
	
	//Mawdee:
	//    'الأول'|
	//    'الثاني'|
	//    'الثالث'|
	//    'الأخير'
	//;
	public OsolQiraaGrammarAccess.MawdeeElements getMawdeeAccess() {
		return gaOsolQiraa.getMawdeeAccess();
	}
	
	public ParserRule getMawdeeRule() {
		return getMawdeeAccess().getRule();
	}
	
	//AbjadModel:
	//    (
	//        hourouf+=Harf | harakat+=Harakah
	//    )*
	//;
	public AbjadGrammarAccess.AbjadModelElements getAbjadModelAccess() {
		return gaAbjad.getAbjadModelAccess();
	}
	
	public ParserRule getAbjadModelRule() {
		return getAbjadModelAccess().getRule();
	}
	
	//Harf:
	//    'حرف' name=AWORD
	//        (('هو' values+=AWORD ('أو' values+=AWORD)*) |
	//        ('ذاته' ref=[Harf|AWORD]))
	//;
	public AbjadGrammarAccess.HarfElements getHarfAccess() {
		return gaAbjad.getHarfAccess();
	}
	
	public ParserRule getHarfRule() {
		return getHarfAccess().getRule();
	}
	
	//Harakah:
	//    'حركة' name=KALEMAH 'هي' value=AWORD
	//;
	public AbjadGrammarAccess.HarakahElements getHarakahAccess() {
		return gaAbjad.getHarakahAccess();
	}
	
	public ParserRule getHarakahRule() {
		return getHarakahAccess().getRule();
	}
	
	//AyahStartModel:
	//    ayat+=AyahStart+
	//;
	public QAyahStartGrammarAccess.AyahStartModelElements getAyahStartModelAccess() {
		return gaQAyahStart.getAyahStartModelAccess();
	}
	
	public ParserRule getAyahStartModelRule() {
		return getAyahStartModelAccess().getRule();
	}
	
	//AyahStart:
	//    'السورة' surah=INT 'الآية' ayah=INT name=KALEMAH
	//;
	public QAyahStartGrammarAccess.AyahStartElements getAyahStartAccess() {
		return gaQAyahStart.getAyahStartAccess();
	}
	
	public ParserRule getAyahStartRule() {
		return getAyahStartAccess().getRule();
	}
	
	//Model:
	//    phrases+=Phrase+;
	public ArabicGrammarAccess.ModelElements getModelAccess() {
		return gaArabic.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Phrase:
	//    basmalah?=BASMALAH? words+=AWORD+;
	public ArabicGrammarAccess.PhraseElements getPhraseAccess() {
		return gaArabic.getPhraseAccess();
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//terminal BASMALAH:
	//    'بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ'
	//;
	public TerminalRule getBASMALAHRule() {
		return gaArabic.getBASMALAHRule();
	}
	
	//terminal AWORD:
	//    (ALETTER|AHARAKAH|ATANWEEN|ASHADDAH)+
	//;
	public TerminalRule getAWORDRule() {
		return gaArabic.getAWORDRule();
	}
	
	//terminal fragment ALIGATURES:
	//    '\uFDF0' ..'\uFDFD'
	//;
	public TerminalRule getALIGATURESRule() {
		return gaArabic.getALIGATURESRule();
	}
	
	//terminal fragment ALETTER:
	//    '\u0621' ..'\u064a'
	//;
	public TerminalRule getALETTERRule() {
		return gaArabic.getALETTERRule();
	}
	
	//terminal fragment ADIGIT:
	//    '\u0660' .. '\u0669'
	//;
	public TerminalRule getADIGITRule() {
		return gaArabic.getADIGITRule();
	}
	
	//terminal fragment ATANWEEN:
	//    '\u064b' .. '\u064d'
	//;
	public TerminalRule getATANWEENRule() {
		return gaArabic.getATANWEENRule();
	}
	
	//terminal fragment AHARAKAH:
	//    '\u064e' .. '\u0650' | '\u0652'
	//;
	public TerminalRule getAHARAKAHRule() {
		return gaArabic.getAHARAKAHRule();
	}
	
	//terminal fragment ASHADDAH:
	//    '\u0651'
	//;
	public TerminalRule getASHADDAHRule() {
		return gaArabic.getASHADDAHRule();
	}
	
	//terminal fragment ANONLETTER:
	//    ('\u0600' .. '\u0620') | ('\u064b' .. '\u06ff')
	//;
	public TerminalRule getANONLETTERRule() {
		return gaArabic.getANONLETTERRule();
	}
	
	//terminal KALEMAH:
	//    '"' -> '"'
	//;
	public TerminalRule getKALEMAHRule() {
		return gaArabic.getKALEMAHRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    'deactivated';
	public TerminalRule getSL_COMMENTRule() {
		return gaArabic.getSL_COMMENTRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
