/*
 * generated by Xtext 2.25.0
 */
package org.qwork.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArabicGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.Model");
		private final Assignment cPhrasesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPhrasesPhraseParserRuleCall_0 = (RuleCall)cPhrasesAssignment.eContents().get(0);
		
		//Model:
		//    phrases+=Phrase+;
		@Override public ParserRule getRule() { return rule; }
		
		//phrases+=Phrase+
		public Assignment getPhrasesAssignment() { return cPhrasesAssignment; }
		
		//Phrase
		public RuleCall getPhrasesPhraseParserRuleCall_0() { return cPhrasesPhraseParserRuleCall_0; }
	}
	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.Phrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWordsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWordsAWORDTerminalRuleCall_0_0 = (RuleCall)cWordsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cWordsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordsAWORDTerminalRuleCall_1_1_0 = (RuleCall)cWordsAssignment_1_1.eContents().get(0);
		
		//Phrase:
		//    words+=AWORD (WS words+=AWORD)*;
		@Override public ParserRule getRule() { return rule; }
		
		//words+=AWORD (WS words+=AWORD)*
		public Group getGroup() { return cGroup; }
		
		//words+=AWORD
		public Assignment getWordsAssignment_0() { return cWordsAssignment_0; }
		
		//AWORD
		public RuleCall getWordsAWORDTerminalRuleCall_0_0() { return cWordsAWORDTerminalRuleCall_0_0; }
		
		//(WS words+=AWORD)*
		public Group getGroup_1() { return cGroup_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_0() { return cWSTerminalRuleCall_1_0; }
		
		//words+=AWORD
		public Assignment getWordsAssignment_1_1() { return cWordsAssignment_1_1; }
		
		//AWORD
		public RuleCall getWordsAWORDTerminalRuleCall_1_1_0() { return cWordsAWORDTerminalRuleCall_1_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final PhraseElements pPhrase;
	private final TerminalRule tALETTER;
	private final TerminalRule tADIGIT;
	private final TerminalRule tAHARAKAH;
	private final TerminalRule tASHADDAH;
	private final TerminalRule tANONLETTER;
	private final TerminalRule tAWORD;
	private final TerminalRule tKALEMAH;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArabicGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPhrase = new PhraseElements();
		this.tALETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.ALETTER");
		this.tADIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.ADIGIT");
		this.tAHARAKAH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.AHARAKAH");
		this.tASHADDAH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.ASHADDAH");
		this.tANONLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.ANONLETTER");
		this.tAWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.AWORD");
		this.tKALEMAH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Arabic.KALEMAH");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.qwork.Arabic".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    phrases+=Phrase+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Phrase:
	//    words+=AWORD (WS words+=AWORD)*;
	public PhraseElements getPhraseAccess() {
		return pPhrase;
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//terminal ALETTER:
	//    '\u0621' ..'\u064a'
	//;
	public TerminalRule getALETTERRule() {
		return tALETTER;
	}
	
	//terminal ADIGIT:
	//    '\u0660' .. '\u0669'
	//;
	public TerminalRule getADIGITRule() {
		return tADIGIT;
	}
	
	//terminal AHARAKAH:
	//    '\u064e' .. '\u0650' | '\u0652'
	//;
	public TerminalRule getAHARAKAHRule() {
		return tAHARAKAH;
	}
	
	//terminal ASHADDAH:
	//    '\u0651'
	//;
	public TerminalRule getASHADDAHRule() {
		return tASHADDAH;
	}
	
	//terminal ANONLETTER:
	//    ('\u0600' .. '\u0620') | ('\u064b' .. '\u06ff')
	//;
	public TerminalRule getANONLETTERRule() {
		return tANONLETTER;
	}
	
	//terminal AWORD:
	//    (ALETTER|AHARAKAH|ASHADDAH)+
	//;
	public TerminalRule getAWORDRule() {
		return tAWORD;
	}
	
	//terminal KALEMAH:
	//    '"' -> '"'
	//;
	public TerminalRule getKALEMAHRule() {
		return tKALEMAH;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
