/*
 * generated by Xtext 2.25.0
 */
package org.qwork.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AbjadGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AbjadModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Abjad.AbjadModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHouroufAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHouroufHarfParserRuleCall_0_0 = (RuleCall)cHouroufAssignment_0.eContents().get(0);
		private final Assignment cHarakatAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cHarakatHarakahParserRuleCall_1_0 = (RuleCall)cHarakatAssignment_1.eContents().get(0);
		
		//AbjadModel:
		//    (
		//        hourouf+=Harf | harakat+=Harakah
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    hourouf+=Harf | harakat+=Harakah
		//)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hourouf+=Harf
		public Assignment getHouroufAssignment_0() { return cHouroufAssignment_0; }
		
		//Harf
		public RuleCall getHouroufHarfParserRuleCall_0_0() { return cHouroufHarfParserRuleCall_0_0; }
		
		//harakat+=Harakah
		public Assignment getHarakatAssignment_1() { return cHarakatAssignment_1; }
		
		//Harakah
		public RuleCall getHarakatHarakahParserRuleCall_1_0() { return cHarakatHarakahParserRuleCall_1_0; }
	}
	public class HarfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Abjad.Harf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArabicLetterHahArabicLetterRehArabicLetterFehKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAWORDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cArabicLetterHehArabicLetterWawKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValuesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValuesAWORDTerminalRuleCall_2_0_1_0 = (RuleCall)cValuesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cArabicLetterAlefWithHamzaAboveArabicLetterWawKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cValuesAWORDTerminalRuleCall_2_0_2_1_0 = (RuleCall)cValuesAssignment_2_0_2_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cArabicLetterThalArabicLetterAlefArabicLetterTehArabicLetterHehKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRefAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cRefHarfCrossReference_2_1_1_0 = (CrossReference)cRefAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRefHarfAWORDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cRefHarfCrossReference_2_1_1_0.eContents().get(1);
		
		//Harf:
		//    'حرف' name=AWORD
		//        (('هو' values+=AWORD ('أو' values+=AWORD)*) |
		//        ('ذاته' ref=[Harf|AWORD]))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'حرف' name=AWORD
		//    (('هو' values+=AWORD ('أو' values+=AWORD)*) |
		//    ('ذاته' ref=[Harf|AWORD]))
		public Group getGroup() { return cGroup; }
		
		//'حرف'
		public Keyword getArabicLetterHahArabicLetterRehArabicLetterFehKeyword_0() { return cArabicLetterHahArabicLetterRehArabicLetterFehKeyword_0; }
		
		//name=AWORD
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//AWORD
		public RuleCall getNameAWORDTerminalRuleCall_1_0() { return cNameAWORDTerminalRuleCall_1_0; }
		
		//(('هو' values+=AWORD ('أو' values+=AWORD)*) |
		//('ذاته' ref=[Harf|AWORD]))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('هو' values+=AWORD ('أو' values+=AWORD)*)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'هو'
		public Keyword getArabicLetterHehArabicLetterWawKeyword_2_0_0() { return cArabicLetterHehArabicLetterWawKeyword_2_0_0; }
		
		//values+=AWORD
		public Assignment getValuesAssignment_2_0_1() { return cValuesAssignment_2_0_1; }
		
		//AWORD
		public RuleCall getValuesAWORDTerminalRuleCall_2_0_1_0() { return cValuesAWORDTerminalRuleCall_2_0_1_0; }
		
		//('أو' values+=AWORD)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//'أو'
		public Keyword getArabicLetterAlefWithHamzaAboveArabicLetterWawKeyword_2_0_2_0() { return cArabicLetterAlefWithHamzaAboveArabicLetterWawKeyword_2_0_2_0; }
		
		//values+=AWORD
		public Assignment getValuesAssignment_2_0_2_1() { return cValuesAssignment_2_0_2_1; }
		
		//AWORD
		public RuleCall getValuesAWORDTerminalRuleCall_2_0_2_1_0() { return cValuesAWORDTerminalRuleCall_2_0_2_1_0; }
		
		//('ذاته' ref=[Harf|AWORD])
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'ذاته'
		public Keyword getArabicLetterThalArabicLetterAlefArabicLetterTehArabicLetterHehKeyword_2_1_0() { return cArabicLetterThalArabicLetterAlefArabicLetterTehArabicLetterHehKeyword_2_1_0; }
		
		//ref=[Harf|AWORD]
		public Assignment getRefAssignment_2_1_1() { return cRefAssignment_2_1_1; }
		
		//[Harf|AWORD]
		public CrossReference getRefHarfCrossReference_2_1_1_0() { return cRefHarfCrossReference_2_1_1_0; }
		
		//AWORD
		public RuleCall getRefHarfAWORDTerminalRuleCall_2_1_1_0_1() { return cRefHarfAWORDTerminalRuleCall_2_1_1_0_1; }
	}
	public class HarakahElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.qwork.Abjad.Harakah");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArabicLetterHahArabicLetterRehArabicLetterKafArabicLetterTehMarbutaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKALEMAHTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cArabicLetterHehArabicLetterYehKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAWORDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Harakah:
		//    'حركة' name=KALEMAH 'هي' value=AWORD
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'حركة' name=KALEMAH 'هي' value=AWORD
		public Group getGroup() { return cGroup; }
		
		//'حركة'
		public Keyword getArabicLetterHahArabicLetterRehArabicLetterKafArabicLetterTehMarbutaKeyword_0() { return cArabicLetterHahArabicLetterRehArabicLetterKafArabicLetterTehMarbutaKeyword_0; }
		
		//name=KALEMAH
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//KALEMAH
		public RuleCall getNameKALEMAHTerminalRuleCall_1_0() { return cNameKALEMAHTerminalRuleCall_1_0; }
		
		//'هي'
		public Keyword getArabicLetterHehArabicLetterYehKeyword_2() { return cArabicLetterHehArabicLetterYehKeyword_2; }
		
		//value=AWORD
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//AWORD
		public RuleCall getValueAWORDTerminalRuleCall_3_0() { return cValueAWORDTerminalRuleCall_3_0; }
	}
	
	
	private final AbjadModelElements pAbjadModel;
	private final HarfElements pHarf;
	private final HarakahElements pHarakah;
	
	private final Grammar grammar;
	
	private final QAyahStartGrammarAccess gaQAyahStart;
	
	private final ArabicGrammarAccess gaArabic;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AbjadGrammarAccess(GrammarProvider grammarProvider,
			QAyahStartGrammarAccess gaQAyahStart,
			ArabicGrammarAccess gaArabic,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaQAyahStart = gaQAyahStart;
		this.gaArabic = gaArabic;
		this.gaTerminals = gaTerminals;
		this.pAbjadModel = new AbjadModelElements();
		this.pHarf = new HarfElements();
		this.pHarakah = new HarakahElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.qwork.Abjad".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public QAyahStartGrammarAccess getQAyahStartGrammarAccess() {
		return gaQAyahStart;
	}
	
	public ArabicGrammarAccess getArabicGrammarAccess() {
		return gaArabic;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AbjadModel:
	//    (
	//        hourouf+=Harf | harakat+=Harakah
	//    )*
	//;
	public AbjadModelElements getAbjadModelAccess() {
		return pAbjadModel;
	}
	
	public ParserRule getAbjadModelRule() {
		return getAbjadModelAccess().getRule();
	}
	
	//Harf:
	//    'حرف' name=AWORD
	//        (('هو' values+=AWORD ('أو' values+=AWORD)*) |
	//        ('ذاته' ref=[Harf|AWORD]))
	//;
	public HarfElements getHarfAccess() {
		return pHarf;
	}
	
	public ParserRule getHarfRule() {
		return getHarfAccess().getRule();
	}
	
	//Harakah:
	//    'حركة' name=KALEMAH 'هي' value=AWORD
	//;
	public HarakahElements getHarakahAccess() {
		return pHarakah;
	}
	
	public ParserRule getHarakahRule() {
		return getHarakahAccess().getRule();
	}
	
	//AyahStartModel:
	//    ayat+=AyahStart+
	//;
	public QAyahStartGrammarAccess.AyahStartModelElements getAyahStartModelAccess() {
		return gaQAyahStart.getAyahStartModelAccess();
	}
	
	public ParserRule getAyahStartModelRule() {
		return getAyahStartModelAccess().getRule();
	}
	
	//AyahStart:
	//    'السورة' surah=INT 'الآية' ayah=INT name=KALEMAH
	//;
	public QAyahStartGrammarAccess.AyahStartElements getAyahStartAccess() {
		return gaQAyahStart.getAyahStartAccess();
	}
	
	public ParserRule getAyahStartRule() {
		return getAyahStartAccess().getRule();
	}
	
	//Model:
	//    phrases+=Phrase+;
	public ArabicGrammarAccess.ModelElements getModelAccess() {
		return gaArabic.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Phrase:
	//    basmalah?=BASMALAH? words+=AWORD+;
	public ArabicGrammarAccess.PhraseElements getPhraseAccess() {
		return gaArabic.getPhraseAccess();
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//terminal BASMALAH:
	//    'بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ'
	//;
	public TerminalRule getBASMALAHRule() {
		return gaArabic.getBASMALAHRule();
	}
	
	//terminal AWORD:
	//    (ALETTER|AHARAKAH|ATANWEEN|ASHADDAH)+
	//;
	public TerminalRule getAWORDRule() {
		return gaArabic.getAWORDRule();
	}
	
	//terminal fragment ALIGATURES:
	//    '\uFDF0' ..'\uFDFD'
	//;
	public TerminalRule getALIGATURESRule() {
		return gaArabic.getALIGATURESRule();
	}
	
	//terminal fragment ALETTER:
	//    '\u0621' ..'\u064a'
	//;
	public TerminalRule getALETTERRule() {
		return gaArabic.getALETTERRule();
	}
	
	//terminal fragment ADIGIT:
	//    '\u0660' .. '\u0669'
	//;
	public TerminalRule getADIGITRule() {
		return gaArabic.getADIGITRule();
	}
	
	//terminal fragment ATANWEEN:
	//    '\u064b' .. '\u064d'
	//;
	public TerminalRule getATANWEENRule() {
		return gaArabic.getATANWEENRule();
	}
	
	//terminal fragment AHARAKAH:
	//    '\u064e' .. '\u0650' | '\u0652'
	//;
	public TerminalRule getAHARAKAHRule() {
		return gaArabic.getAHARAKAHRule();
	}
	
	//terminal fragment ASHADDAH:
	//    '\u0651'
	//;
	public TerminalRule getASHADDAHRule() {
		return gaArabic.getASHADDAHRule();
	}
	
	//terminal fragment ANONLETTER:
	//    ('\u0600' .. '\u0620') | ('\u064b' .. '\u06ff')
	//;
	public TerminalRule getANONLETTERRule() {
		return gaArabic.getANONLETTERRule();
	}
	
	//terminal KALEMAH:
	//    '"' -> '"'
	//;
	public TerminalRule getKALEMAHRule() {
		return gaArabic.getKALEMAHRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    'deactivated';
	public TerminalRule getSL_COMMENTRule() {
		return gaArabic.getSL_COMMENTRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
