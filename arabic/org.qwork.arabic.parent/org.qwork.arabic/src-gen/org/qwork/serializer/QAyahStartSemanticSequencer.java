/*
 * generated by Xtext 2.25.0
 */
package org.qwork.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.qwork.arabic.ArabicPackage;
import org.qwork.arabic.Model;
import org.qwork.arabic.Phrase;
import org.qwork.qayahstart.AyahStart;
import org.qwork.qayahstart.AyahStartModel;
import org.qwork.qayahstart.QayahstartPackage;
import org.qwork.services.QAyahStartGrammarAccess;

@SuppressWarnings("all")
public class QAyahStartSemanticSequencer extends ArabicSemanticSequencer {

	@Inject
	private QAyahStartGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ArabicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArabicPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ArabicPackage.PHRASE:
				sequence_Phrase(context, (Phrase) semanticObject); 
				return; 
			}
		else if (epackage == QayahstartPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QayahstartPackage.AYAH_START:
				sequence_AyahStart(context, (AyahStart) semanticObject); 
				return; 
			case QayahstartPackage.AYAH_START_MODEL:
				sequence_AyahStartModel(context, (AyahStartModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AyahStartModel returns AyahStartModel
	 *
	 * Constraint:
	 *     ayat+=AyahStart+
	 */
	protected void sequence_AyahStartModel(ISerializationContext context, AyahStartModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AyahStart returns AyahStart
	 *
	 * Constraint:
	 *     (surah=INT ayah=INT name=KALEMAH)
	 */
	protected void sequence_AyahStart(ISerializationContext context, AyahStart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QayahstartPackage.Literals.AYAH_START__SURAH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QayahstartPackage.Literals.AYAH_START__SURAH));
			if (transientValues.isValueTransient(semanticObject, QayahstartPackage.Literals.AYAH_START__AYAH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QayahstartPackage.Literals.AYAH_START__AYAH));
			if (transientValues.isValueTransient(semanticObject, QayahstartPackage.Literals.AYAH_START__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QayahstartPackage.Literals.AYAH_START__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAyahStartAccess().getSurahINTTerminalRuleCall_1_0(), semanticObject.getSurah());
		feeder.accept(grammarAccess.getAyahStartAccess().getAyahINTTerminalRuleCall_3_0(), semanticObject.getAyah());
		feeder.accept(grammarAccess.getAyahStartAccess().getNameKALEMAHTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
