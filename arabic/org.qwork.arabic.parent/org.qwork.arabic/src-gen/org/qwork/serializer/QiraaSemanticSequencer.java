/*
 * generated by Xtext 2.25.0
 */
package org.qwork.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.qwork.abjad.AbjadModel;
import org.qwork.abjad.AbjadPackage;
import org.qwork.abjad.Harakah;
import org.qwork.abjad.Harf;
import org.qwork.arabic.ArabicPackage;
import org.qwork.arabic.Model;
import org.qwork.arabic.Phrase;
import org.qwork.matn.Bayt;
import org.qwork.matn.Maktah;
import org.qwork.matn.Matn;
import org.qwork.matn.MatnModel;
import org.qwork.matn.MatnPackage;
import org.qwork.osolqiraa.HarfQuran;
import org.qwork.osolqiraa.IMAM;
import org.qwork.osolqiraa.Istelah;
import org.qwork.osolqiraa.Kayd;
import org.qwork.osolqiraa.OsolQiraaModel;
import org.qwork.osolqiraa.OsolqiraaPackage;
import org.qwork.osolqiraa.Qaree;
import org.qwork.osolqiraa.Ramz;
import org.qwork.osolqiraa.Rawee;
import org.qwork.osolqiraa.Tareek;
import org.qwork.qayahstart.AyahStart;
import org.qwork.qayahstart.AyahStartModel;
import org.qwork.qayahstart.QayahstartPackage;
import org.qwork.qiraa.Kaaedah;
import org.qwork.qiraa.Marjeh;
import org.qwork.qiraa.QiraaModel;
import org.qwork.qiraa.QiraaPackage;
import org.qwork.qiraa.Tafsil;
import org.qwork.services.QiraaGrammarAccess;

@SuppressWarnings("all")
public class QiraaSemanticSequencer extends MatnSemanticSequencer {

	@Inject
	private QiraaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AbjadPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AbjadPackage.ABJAD_MODEL:
				sequence_AbjadModel(context, (AbjadModel) semanticObject); 
				return; 
			case AbjadPackage.HARAKAH:
				sequence_Harakah(context, (Harakah) semanticObject); 
				return; 
			case AbjadPackage.HARF:
				sequence_Harf(context, (Harf) semanticObject); 
				return; 
			}
		else if (epackage == ArabicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArabicPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ArabicPackage.PHRASE:
				sequence_Phrase(context, (Phrase) semanticObject); 
				return; 
			}
		else if (epackage == MatnPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MatnPackage.BAYT:
				sequence_Bayt(context, (Bayt) semanticObject); 
				return; 
			case MatnPackage.MAKTAH:
				sequence_Maktah(context, (Maktah) semanticObject); 
				return; 
			case MatnPackage.MATN:
				sequence_Matn(context, (Matn) semanticObject); 
				return; 
			case MatnPackage.MATN_MODEL:
				sequence_MatnModel(context, (MatnModel) semanticObject); 
				return; 
			}
		else if (epackage == OsolqiraaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OsolqiraaPackage.HARF_QURAN:
				sequence_HarfQuran(context, (HarfQuran) semanticObject); 
				return; 
			case OsolqiraaPackage.IMAM:
				sequence_Douaa_Person(context, (IMAM) semanticObject); 
				return; 
			case OsolqiraaPackage.ISTELAH:
				sequence_Istelah(context, (Istelah) semanticObject); 
				return; 
			case OsolqiraaPackage.KAYD:
				sequence_Kayd(context, (Kayd) semanticObject); 
				return; 
			case OsolqiraaPackage.OSOL_QIRAA_MODEL:
				sequence_OsolQiraaModel(context, (OsolQiraaModel) semanticObject); 
				return; 
			case OsolqiraaPackage.QAREE:
				sequence_Person(context, (Qaree) semanticObject); 
				return; 
			case OsolqiraaPackage.RAMZ:
				sequence_Ramz(context, (Ramz) semanticObject); 
				return; 
			case OsolqiraaPackage.RAWEE:
				sequence_Person_Rawee(context, (Rawee) semanticObject); 
				return; 
			case OsolqiraaPackage.TAREEK:
				sequence_Tareek(context, (Tareek) semanticObject); 
				return; 
			}
		else if (epackage == QayahstartPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QayahstartPackage.AYAH_START:
				sequence_AyahStart(context, (AyahStart) semanticObject); 
				return; 
			case QayahstartPackage.AYAH_START_MODEL:
				sequence_AyahStartModel(context, (AyahStartModel) semanticObject); 
				return; 
			}
		else if (epackage == QiraaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QiraaPackage.KAAEDAH:
				sequence_Kaaedah(context, (Kaaedah) semanticObject); 
				return; 
			case QiraaPackage.MARJEH:
				sequence_Marjeh(context, (Marjeh) semanticObject); 
				return; 
			case QiraaPackage.QIRAA_MODEL:
				sequence_QiraaModel(context, (QiraaModel) semanticObject); 
				return; 
			case QiraaPackage.TAFSIL:
				sequence_Tafsil(context, (Tafsil) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Kaaedah returns Kaaedah
	 *
	 * Constraint:
	 *     (refs+=[YokraaLahWaRamz|KALEMAH] kayd=[Kayd|KALEMAH] harf=HarfQuran)
	 */
	protected void sequence_Kaaedah(ISerializationContext context, Kaaedah semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Marjeh returns Marjeh
	 *
	 * Constraint:
	 *     (name=KALEMAH matn=[Matn|AWORDS] romoz+=Ramz* tafsil+=Tafsil+)
	 */
	protected void sequence_Marjeh(ISerializationContext context, Marjeh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QiraaModel returns QiraaModel
	 *
	 * Constraint:
	 *     marjee+=Marjeh+
	 */
	protected void sequence_QiraaModel(ISerializationContext context, QiraaModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tafsil returns Tafsil
	 *
	 * Constraint:
	 *     (nass=KALEMAH kedah+=Kaaedah)
	 */
	protected void sequence_Tafsil(ISerializationContext context, Tafsil semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
