/*
 * generated by Xtext 2.25.0
 */
package org.qwork.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.qwork.arabic.ArabicPackage;
import org.qwork.arabic.Model;
import org.qwork.arabic.Phrase;
import org.qwork.qiraa.Harakah;
import org.qwork.qiraa.Harf;
import org.qwork.qiraa.Qaree;
import org.qwork.qiraa.QiraaModel;
import org.qwork.qiraa.QiraaPackage;
import org.qwork.qiraa.Rawee;
import org.qwork.qiraa.Tareek;
import org.qwork.services.QiraaGrammarAccess;

@SuppressWarnings("all")
public class QiraaSemanticSequencer extends ArabicSemanticSequencer {

	@Inject
	private QiraaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ArabicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArabicPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ArabicPackage.PHRASE:
				sequence_Phrase(context, (Phrase) semanticObject); 
				return; 
			}
		else if (epackage == QiraaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QiraaPackage.HARAKAH:
				sequence_Harakah(context, (Harakah) semanticObject); 
				return; 
			case QiraaPackage.HARF:
				sequence_Harf(context, (Harf) semanticObject); 
				return; 
			case QiraaPackage.QAREE:
				sequence_Person(context, (Qaree) semanticObject); 
				return; 
			case QiraaPackage.QIRAA_MODEL:
				sequence_QiraaModel(context, (QiraaModel) semanticObject); 
				return; 
			case QiraaPackage.RAWEE:
				sequence_Person_Rawee(context, (Rawee) semanticObject); 
				return; 
			case QiraaPackage.TAREEK:
				sequence_Tareek(context, (Tareek) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Harakah returns Harakah
	 *
	 * Constraint:
	 *     (name=KALEMAH value=AHARAKAH)
	 */
	protected void sequence_Harakah(ISerializationContext context, Harakah semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QiraaPackage.Literals.HARAKAH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QiraaPackage.Literals.HARAKAH__NAME));
			if (transientValues.isValueTransient(semanticObject, QiraaPackage.Literals.HARAKAH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QiraaPackage.Literals.HARAKAH__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHarakahAccess().getNameKALEMAHTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHarakahAccess().getValueAHARAKAHTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Harf returns Harf
	 *
	 * Constraint:
	 *     (name=AWORD ((values+=ALETTER values+=ALETTER*) | ref=[Harf|AWORD]))
	 */
	protected void sequence_Harf(ISerializationContext context, Harf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Qaree returns Qaree
	 *
	 * Constraint:
	 *     (name=KALEMAH esm=KALEMAH? lakab=KALEMAH? towofia=ADIGITS?)
	 */
	protected void sequence_Person(ISerializationContext context, Qaree semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rawee returns Rawee
	 *
	 * Constraint:
	 *     (name=KALEMAH esm=KALEMAH? lakab=KALEMAH? towofia=ADIGITS? qaree=[Qaree|KALEMAH])
	 */
	protected void sequence_Person_Rawee(ISerializationContext context, Rawee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QiraaModel returns QiraaModel
	 *
	 * Constraint:
	 *     (hourouf+=Harf | qoraa+=Qaree | torok+=Tareek | harakat+=Harakah | rowat+=Rawee)+
	 */
	protected void sequence_QiraaModel(ISerializationContext context, QiraaModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tareek returns Tareek
	 *
	 * Constraint:
	 *     (name=KALEMAH ref=[Tareek|KALEMAH]?)
	 */
	protected void sequence_Tareek(ISerializationContext context, Tareek semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
