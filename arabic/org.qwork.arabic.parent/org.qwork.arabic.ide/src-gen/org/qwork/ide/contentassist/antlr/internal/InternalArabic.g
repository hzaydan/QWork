/*
 * generated by Xtext 2.25.0
 */
grammar InternalArabic;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.qwork.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.qwork.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.qwork.services.ArabicGrammarAccess;

}
@parser::members {
	private ArabicGrammarAccess grammarAccess;

	public void setGrammarAccess(ArabicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getPhrasesAssignment()); }
			(rule__Model__PhrasesAssignment)
			{ after(grammarAccess.getModelAccess().getPhrasesAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getPhrasesAssignment()); }
			(rule__Model__PhrasesAssignment)*
			{ after(grammarAccess.getModelAccess().getPhrasesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePhrase
entryRulePhrase
:
{ before(grammarAccess.getPhraseRule()); }
	 rulePhrase
{ after(grammarAccess.getPhraseRule()); } 
	 EOF 
;

// Rule Phrase
rulePhrase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPhraseAccess().getGroup()); }
		(rule__Phrase__Group__0)
		{ after(grammarAccess.getPhraseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group__0__Impl
	rule__Phrase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getWordsAssignment_0()); }
	(rule__Phrase__WordsAssignment_0)
	{ after(grammarAccess.getPhraseAccess().getWordsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getGroup_1()); }
	(rule__Phrase__Group_1__0)*
	{ after(grammarAccess.getPhraseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Phrase__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group_1__0__Impl
	rule__Phrase__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getWSTerminalRuleCall_1_0()); }
	RULE_WS
	{ after(grammarAccess.getPhraseAccess().getWSTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getWordsAssignment_1_1()); }
	(rule__Phrase__WordsAssignment_1_1)
	{ after(grammarAccess.getPhraseAccess().getWordsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__PhrasesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPhrasesPhraseParserRuleCall_0()); }
		rulePhrase
		{ after(grammarAccess.getModelAccess().getPhrasesPhraseParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__WordsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhraseAccess().getWordsAWORDTerminalRuleCall_0_0()); }
		RULE_AWORD
		{ after(grammarAccess.getPhraseAccess().getWordsAWORDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__WordsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhraseAccess().getWordsAWORDTerminalRuleCall_1_1_0()); }
		RULE_AWORD
		{ after(grammarAccess.getPhraseAccess().getWordsAWORDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_ALETTER : '\u0621'..'\u064A';

fragment RULE_ADIGIT : '\u0660'..'\u0669';

RULE_AHARAKAH : ('\u064E'..'\u0650'|'\u0652');

RULE_ASHADDAH : '\u0651';

RULE_ANONLETTER : ('\u0600'..'\u0620'|'\u064B'..'\u06FF');

RULE_ADIGITS : RULE_ADIGIT+;

RULE_AWORD : RULE_ALETTER+;

RULE_KALEMAH : '"' ( options {greedy=false;} : . )*'"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
